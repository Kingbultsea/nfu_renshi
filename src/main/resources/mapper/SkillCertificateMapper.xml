<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.nfsysu.renshi.dao.SkillCertificateMapper">
  <resultMap id="BaseResultMap" type="cn.nfsysu.renshi.domain.SkillCertificate">
    <id column="Id" jdbcType="INTEGER" property="id" />
    <result column="father" jdbcType="INTEGER" property="father" />
    <result column="certificate_type" jdbcType="VARCHAR" property="certificateType" />
    <result column="language_certificate_name" jdbcType="VARCHAR" property="languageCertificateName" />
    <result column="certificate_name" jdbcType="VARCHAR" property="certificateName" />
    <result column="years" jdbcType="VARCHAR" property="years" />
    <result column="lssuing_unit" jdbcType="VARCHAR" property="lssuingUnit" />
    <result column="certificate_number" jdbcType="VARCHAR" property="certificateNumber" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    Id, father, certificate_type, language_certificate_name, certificate_name, years, 
    lssuing_unit, certificate_number
  </sql>
  <select id="selectByExample" parameterType="cn.nfsysu.renshi.domain.SkillCertificateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from skill_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from skill_certificate
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from skill_certificate
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.nfsysu.renshi.domain.SkillCertificateExample">
    delete from skill_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.nfsysu.renshi.domain.SkillCertificate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into skill_certificate (father, certificate_type, language_certificate_name, 
      certificate_name, years, lssuing_unit, 
      certificate_number)
    values (#{father,jdbcType=INTEGER}, #{certificateType,jdbcType=VARCHAR}, #{languageCertificateName,jdbcType=VARCHAR}, 
      #{certificateName,jdbcType=VARCHAR}, #{years,jdbcType=VARCHAR}, #{lssuingUnit,jdbcType=VARCHAR}, 
      #{certificateNumber,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.nfsysu.renshi.domain.SkillCertificate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into skill_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="father != null">
        father,
      </if>
      <if test="certificateType != null">
        certificate_type,
      </if>
      <if test="languageCertificateName != null">
        language_certificate_name,
      </if>
      <if test="certificateName != null">
        certificate_name,
      </if>
      <if test="years != null">
        years,
      </if>
      <if test="lssuingUnit != null">
        lssuing_unit,
      </if>
      <if test="certificateNumber != null">
        certificate_number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="father != null">
        #{father,jdbcType=INTEGER},
      </if>
      <if test="certificateType != null">
        #{certificateType,jdbcType=VARCHAR},
      </if>
      <if test="languageCertificateName != null">
        #{languageCertificateName,jdbcType=VARCHAR},
      </if>
      <if test="certificateName != null">
        #{certificateName,jdbcType=VARCHAR},
      </if>
      <if test="years != null">
        #{years,jdbcType=VARCHAR},
      </if>
      <if test="lssuingUnit != null">
        #{lssuingUnit,jdbcType=VARCHAR},
      </if>
      <if test="certificateNumber != null">
        #{certificateNumber,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.nfsysu.renshi.domain.SkillCertificateExample" resultType="java.lang.Long">
    select count(*) from skill_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update skill_certificate
    <set>
      <if test="record.id != null">
        Id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.father != null">
        father = #{record.father,jdbcType=INTEGER},
      </if>
      <if test="record.certificateType != null">
        certificate_type = #{record.certificateType,jdbcType=VARCHAR},
      </if>
      <if test="record.languageCertificateName != null">
        language_certificate_name = #{record.languageCertificateName,jdbcType=VARCHAR},
      </if>
      <if test="record.certificateName != null">
        certificate_name = #{record.certificateName,jdbcType=VARCHAR},
      </if>
      <if test="record.years != null">
        years = #{record.years,jdbcType=VARCHAR},
      </if>
      <if test="record.lssuingUnit != null">
        lssuing_unit = #{record.lssuingUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.certificateNumber != null">
        certificate_number = #{record.certificateNumber,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update skill_certificate
    set Id = #{record.id,jdbcType=INTEGER},
      father = #{record.father,jdbcType=INTEGER},
      certificate_type = #{record.certificateType,jdbcType=VARCHAR},
      language_certificate_name = #{record.languageCertificateName,jdbcType=VARCHAR},
      certificate_name = #{record.certificateName,jdbcType=VARCHAR},
      years = #{record.years,jdbcType=VARCHAR},
      lssuing_unit = #{record.lssuingUnit,jdbcType=VARCHAR},
      certificate_number = #{record.certificateNumber,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.nfsysu.renshi.domain.SkillCertificate">
    update skill_certificate
    <set>
      <if test="father != null">
        father = #{father,jdbcType=INTEGER},
      </if>
      <if test="certificateType != null">
        certificate_type = #{certificateType,jdbcType=VARCHAR},
      </if>
      <if test="languageCertificateName != null">
        language_certificate_name = #{languageCertificateName,jdbcType=VARCHAR},
      </if>
      <if test="certificateName != null">
        certificate_name = #{certificateName,jdbcType=VARCHAR},
      </if>
      <if test="years != null">
        years = #{years,jdbcType=VARCHAR},
      </if>
      <if test="lssuingUnit != null">
        lssuing_unit = #{lssuingUnit,jdbcType=VARCHAR},
      </if>
      <if test="certificateNumber != null">
        certificate_number = #{certificateNumber,jdbcType=VARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.nfsysu.renshi.domain.SkillCertificate">
    update skill_certificate
    set father = #{father,jdbcType=INTEGER},
      certificate_type = #{certificateType,jdbcType=VARCHAR},
      language_certificate_name = #{languageCertificateName,jdbcType=VARCHAR},
      certificate_name = #{certificateName,jdbcType=VARCHAR},
      years = #{years,jdbcType=VARCHAR},
      lssuing_unit = #{lssuingUnit,jdbcType=VARCHAR},
      certificate_number = #{certificateNumber,jdbcType=VARCHAR}
    where Id = #{id,jdbcType=INTEGER}
  </update>
</mapper>